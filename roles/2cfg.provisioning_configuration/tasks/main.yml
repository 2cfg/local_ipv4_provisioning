---
# tasks file for 2cfg.provisioning_configuration
- name: Retrieve ipaddr from mysql ipaddr_table
  community.mysql.mysql_query:
    login_db: dnsmon
    query: SELECT ipaddr FROM ipaddr_table WHERE local = 'off' LIMIT 1
  register: r_query

- name: Debug processing data
  debug: "{{ item.ipaddr }}"
  with_items: "{{ r_query.query_result }}" 

- name: Create rc.local.d directory
  ansible.builtin.file:
    path: /etc/rc.local.d
    state: directory

- name: Create rc.local.d script
  template:
    src: rc.local.sh.j2
    dest: "/etc/rc.local.d/{{ item.ipaddr }}.sh"
    mode: 0755
  with_items: "{{ r_query.query_result }}"

- name: Add arptables rule
  shell: "/usr/sbin/arptables -I INPUT -d {{ item.ipaddr }} -j DROP"
  with_items: "{{ r_query.query_result }}"

- name: Add ip address to interface bond0
  shell: "/usr/sbin/ip addr add {{ item.ipaddr }}/32 dev bond0"
  with_items: "{{ r_query.query_result }}"
  ignore_errors: yes

- name: Create ip_vhost.d directory
  ansible.builtin.file:
    path: /etc/nginx/ip_vhost.d
    state: directory

- name: Create nginx ip_vhost.conf
  template:
    src: ip_vhost.conf.j2
    dest: /etc/nginx/ip_vhost.d/{{ item.ipaddr }}.conf
    mode: 0644
  with_items: "{{ r_query.query_result }}"

- name: Check nginx config
  shell: "/usr/sbin/nginx -t"
  register: nginx_config_status
  ignore_errors: yes

- name: Check nginx test status results for errors
  set_fact:
    nginx_config_error: 1
    cacheable: yes
  when: nginx_config_status.rc is defined and nginx_config_status.rc != 0

- block:
    - include_tasks: nginx_test_failed.yml
  any_errors_fatal: true
  when: nginx_config_error == 1

- name: nginx reload
  service:
    name=nginx
    state=reloaded
  when: nginx_config_error == 0
  ignore_unreachable: yes

- name: Update ipaddr local state
  community.mysql.mysql_query:
    login_db: dnsmon
    query: UPDATE ipaddr_table SET local = 'on' WHERE ipaddr = '{{ item.ipaddr }}'
  with_items: "{{ r_query.query_result }}"

